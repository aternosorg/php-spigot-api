<?php
/**
 * DefaultApi
 * PHP version 8.1
 *
 * @package  Aternos\SpigotApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpigotMC Xenforo Resource Manager API
 *
 * Exposes resource/author information via a simple JSON REST API
 *
 * The version of the OpenAPI document: 0.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\SpigotApi\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Aternos\SpigotApi\ApiException;
use Aternos\SpigotApi\Configuration;
use Aternos\SpigotApi\HeaderSelector;
use Aternos\SpigotApi\FormDataProcessor;
use Aternos\SpigotApi\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @package  Aternos\SpigotApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'findAuthor' => [
            'application/json',
        ],
        'getAuthor' => [
            'application/json',
        ],
        'getResource' => [
            'application/json',
        ],
        'getResourceUpdate' => [
            'application/json',
        ],
        'getResourceUpdates' => [
            'application/json',
        ],
        'getResourcesByAuthor' => [
            'application/json',
        ],
        'listResourceCategories' => [
            'application/json',
        ],
        'listResources' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation findAuthor
     *
     * Obtain an author/user by their name
     *
     * @param  string $name The author username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAuthor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\Author
     */
    public function findAuthor(
        string $name,
        string $contentType = self::contentTypes['findAuthor'][0]
    ): \Aternos\SpigotApi\Model\Author
    {
        list($response) = $this->findAuthorWithHttpInfo($name, $contentType);
        return $response;
    }

    /**
     * Operation findAuthorWithHttpInfo
     *
     * Obtain an author/user by their name
     *
     * @param  string $name The author username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAuthor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\Author, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAuthorWithHttpInfo(
        string $name,
        string $contentType = self::contentTypes['findAuthor'][0]
    ): array
    {
        $request = $this->findAuthorRequest($name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\Author',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\Author',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\Author',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation findAuthorAsync
     *
     * Obtain an author/user by their name
     *
     * @param  string $name The author username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function findAuthorAsync(
        string $name,
        string $contentType = self::contentTypes['findAuthor'][0]
    ): PromiseInterface
    {
        return $this->findAuthorAsyncWithHttpInfo($name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAuthorAsyncWithHttpInfo
     *
     * Obtain an author/user by their name
     *
     * @param  string $name The author username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function findAuthorAsyncWithHttpInfo(
        string $name,
        string $contentType = self::contentTypes['findAuthor'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\Author';
        $request = $this->findAuthorRequest($name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAuthor'
     *
     * @param  string $name The author username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAuthorRequest(
        string $name,
        string $contentType = self::contentTypes['findAuthor'][0]
    ): Request
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $name when calling findAuthor'
            );
        }


        $resourcePath = '/index.php?action=findAuthor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuthor
     *
     * Obtain an author/user by their id
     *
     * @param  int $id The author ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\Author
     */
    public function getAuthor(
        int $id,
        string $contentType = self::contentTypes['getAuthor'][0]
    ): \Aternos\SpigotApi\Model\Author
    {
        list($response) = $this->getAuthorWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getAuthorWithHttpInfo
     *
     * Obtain an author/user by their id
     *
     * @param  int $id The author ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\Author, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthorWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getAuthor'][0]
    ): array
    {
        $request = $this->getAuthorRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\Author',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\Author',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\Author',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getAuthorAsync
     *
     * Obtain an author/user by their id
     *
     * @param  int $id The author ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAuthorAsync(
        int $id,
        string $contentType = self::contentTypes['getAuthor'][0]
    ): PromiseInterface
    {
        return $this->getAuthorAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthorAsyncWithHttpInfo
     *
     * Obtain an author/user by their id
     *
     * @param  int $id The author ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAuthorAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getAuthor'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\Author';
        $request = $this->getAuthorRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthor'
     *
     * @param  int $id The author ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthorRequest(
        int $id,
        string $contentType = self::contentTypes['getAuthor'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getAuthor'
            );
        }


        $resourcePath = '/index.php?action=getAuthor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResource
     *
     * Obtain a resource
     *
     * @param  int $id The resource ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResource'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\Resource
     */
    public function getResource(
        int $id,
        string $contentType = self::contentTypes['getResource'][0]
    ): \Aternos\SpigotApi\Model\Resource
    {
        list($response) = $this->getResourceWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getResourceWithHttpInfo
     *
     * Obtain a resource
     *
     * @param  int $id The resource ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResource'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\Resource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResourceWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getResource'][0]
    ): array
    {
        $request = $this->getResourceRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\Resource',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\Resource',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\Resource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getResourceAsync
     *
     * Obtain a resource
     *
     * @param  int $id The resource ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResource'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourceAsync(
        int $id,
        string $contentType = self::contentTypes['getResource'][0]
    ): PromiseInterface
    {
        return $this->getResourceAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResourceAsyncWithHttpInfo
     *
     * Obtain a resource
     *
     * @param  int $id The resource ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResource'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourceAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getResource'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\Resource';
        $request = $this->getResourceRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResource'
     *
     * @param  int $id The resource ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResource'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResourceRequest(
        int $id,
        string $contentType = self::contentTypes['getResource'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getResource'
            );
        }


        $resourcePath = '/index.php?action=getResource';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResourceUpdate
     *
     * Obtain a specific update to a resource
     *
     * @param  int $id The resource update ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdate'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\ResourceUpdate
     */
    public function getResourceUpdate(
        int $id,
        string $contentType = self::contentTypes['getResourceUpdate'][0]
    ): \Aternos\SpigotApi\Model\ResourceUpdate
    {
        list($response) = $this->getResourceUpdateWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getResourceUpdateWithHttpInfo
     *
     * Obtain a specific update to a resource
     *
     * @param  int $id The resource update ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdate'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\ResourceUpdate, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResourceUpdateWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getResourceUpdate'][0]
    ): array
    {
        $request = $this->getResourceUpdateRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\ResourceUpdate',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\ResourceUpdate',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\ResourceUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getResourceUpdateAsync
     *
     * Obtain a specific update to a resource
     *
     * @param  int $id The resource update ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdate'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourceUpdateAsync(
        int $id,
        string $contentType = self::contentTypes['getResourceUpdate'][0]
    ): PromiseInterface
    {
        return $this->getResourceUpdateAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResourceUpdateAsyncWithHttpInfo
     *
     * Obtain a specific update to a resource
     *
     * @param  int $id The resource update ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdate'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourceUpdateAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getResourceUpdate'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\ResourceUpdate';
        $request = $this->getResourceUpdateRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResourceUpdate'
     *
     * @param  int $id The resource update ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdate'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResourceUpdateRequest(
        int $id,
        string $contentType = self::contentTypes['getResourceUpdate'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getResourceUpdate'
            );
        }


        $resourcePath = '/index.php?action=getResourceUpdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResourceUpdates
     *
     * Obtain all the updates to a resource
     *
     * @param  int $id The resource ID (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdates'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\ResourceUpdate[]
     */
    public function getResourceUpdates(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourceUpdates'][0]
    ): array
    {
        list($response) = $this->getResourceUpdatesWithHttpInfo($id, $page, $contentType);
        return $response;
    }

    /**
     * Operation getResourceUpdatesWithHttpInfo
     *
     * Obtain all the updates to a resource
     *
     * @param  int $id The resource ID (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdates'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\ResourceUpdate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getResourceUpdatesWithHttpInfo(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourceUpdates'][0]
    ): array
    {
        $request = $this->getResourceUpdatesRequest($id, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\ResourceUpdate[]',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\ResourceUpdate[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\ResourceUpdate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getResourceUpdatesAsync
     *
     * Obtain all the updates to a resource
     *
     * @param  int $id The resource ID (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdates'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourceUpdatesAsync(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourceUpdates'][0]
    ): PromiseInterface
    {
        return $this->getResourceUpdatesAsyncWithHttpInfo($id, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResourceUpdatesAsyncWithHttpInfo
     *
     * Obtain all the updates to a resource
     *
     * @param  int $id The resource ID (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdates'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourceUpdatesAsyncWithHttpInfo(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourceUpdates'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\ResourceUpdate[]';
        $request = $this->getResourceUpdatesRequest($id, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResourceUpdates'
     *
     * @param  int $id The resource ID (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourceUpdates'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResourceUpdatesRequest(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourceUpdates'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getResourceUpdates'
            );
        }



        $resourcePath = '/index.php?action=getResourceUpdates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResourcesByAuthor
     *
     * Obtain a list of all resources by a specific author/user
     *
     * @param  int $id The author/user id (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourcesByAuthor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\Resource[]
     */
    public function getResourcesByAuthor(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourcesByAuthor'][0]
    ): array
    {
        list($response) = $this->getResourcesByAuthorWithHttpInfo($id, $page, $contentType);
        return $response;
    }

    /**
     * Operation getResourcesByAuthorWithHttpInfo
     *
     * Obtain a list of all resources by a specific author/user
     *
     * @param  int $id The author/user id (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourcesByAuthor'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\Resource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getResourcesByAuthorWithHttpInfo(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourcesByAuthor'][0]
    ): array
    {
        $request = $this->getResourcesByAuthorRequest($id, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\Resource[]',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\Resource[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\Resource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getResourcesByAuthorAsync
     *
     * Obtain a list of all resources by a specific author/user
     *
     * @param  int $id The author/user id (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourcesByAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourcesByAuthorAsync(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourcesByAuthor'][0]
    ): PromiseInterface
    {
        return $this->getResourcesByAuthorAsyncWithHttpInfo($id, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResourcesByAuthorAsyncWithHttpInfo
     *
     * Obtain a list of all resources by a specific author/user
     *
     * @param  int $id The author/user id (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourcesByAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getResourcesByAuthorAsyncWithHttpInfo(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourcesByAuthor'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\Resource[]';
        $request = $this->getResourcesByAuthorRequest($id, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResourcesByAuthor'
     *
     * @param  int $id The author/user id (required)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getResourcesByAuthor'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getResourcesByAuthorRequest(
        int $id,
        ?int $page = null,
        string $contentType = self::contentTypes['getResourcesByAuthor'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getResourcesByAuthor'
            );
        }



        $resourcePath = '/index.php?action=getResourcesByAuthor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listResourceCategories
     *
     * Obtain a list of all resource categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResourceCategories'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\ResourceCategory[]
     */
    public function listResourceCategories(
        string $contentType = self::contentTypes['listResourceCategories'][0]
    ): array
    {
        list($response) = $this->listResourceCategoriesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listResourceCategoriesWithHttpInfo
     *
     * Obtain a list of all resource categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResourceCategories'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\ResourceCategory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listResourceCategoriesWithHttpInfo(
        string $contentType = self::contentTypes['listResourceCategories'][0]
    ): array
    {
        $request = $this->listResourceCategoriesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\ResourceCategory[]',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\ResourceCategory[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\ResourceCategory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation listResourceCategoriesAsync
     *
     * Obtain a list of all resource categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResourceCategories'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listResourceCategoriesAsync(
        string $contentType = self::contentTypes['listResourceCategories'][0]
    ): PromiseInterface
    {
        return $this->listResourceCategoriesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listResourceCategoriesAsyncWithHttpInfo
     *
     * Obtain a list of all resource categories
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResourceCategories'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listResourceCategoriesAsyncWithHttpInfo(
        string $contentType = self::contentTypes['listResourceCategories'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\ResourceCategory[]';
        $request = $this->listResourceCategoriesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listResourceCategories'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResourceCategories'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listResourceCategoriesRequest(
        string $contentType = self::contentTypes['listResourceCategories'][0]
    ): Request
    {


        $resourcePath = '/index.php?action=listResourceCategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listResources
     *
     * Obtain a list of all resources
     *
     * @param  int|null $category The category ID from which to draw resources (optional)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResources'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Aternos\SpigotApi\Model\Resource[]
     */
    public function listResources(
        ?int $category = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listResources'][0]
    ): array
    {
        list($response) = $this->listResourcesWithHttpInfo($category, $page, $contentType);
        return $response;
    }

    /**
     * Operation listResourcesWithHttpInfo
     *
     * Obtain a list of all resources
     *
     * @param  int|null $category The category ID from which to draw resources (optional)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResources'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Aternos\SpigotApi\Model\Resource[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listResourcesWithHttpInfo(
        ?int $category = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listResources'][0]
    ): array
    {
        $request = $this->listResourcesRequest($category, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Aternos\SpigotApi\Model\Resource[]',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Aternos\SpigotApi\Model\Resource[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\SpigotApi\Model\Resource[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation listResourcesAsync
     *
     * Obtain a list of all resources
     *
     * @param  int|null $category The category ID from which to draw resources (optional)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listResourcesAsync(
        ?int $category = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listResources'][0]
    ): PromiseInterface
    {
        return $this->listResourcesAsyncWithHttpInfo($category, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listResourcesAsyncWithHttpInfo
     *
     * Obtain a list of all resources
     *
     * @param  int|null $category The category ID from which to draw resources (optional)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listResourcesAsyncWithHttpInfo(
        ?int $category = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listResources'][0]
    ): PromiseInterface
    {
        $returnType = '\Aternos\SpigotApi\Model\Resource[]';
        $request = $this->listResourcesRequest($category, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listResources'
     *
     * @param  int|null $category The category ID from which to draw resources (optional)
     * @param  int|null $page The page of results to get (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listResourcesRequest(
        ?int $category = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listResources'][0]
    ): Request
    {




        $resourcePath = '/index.php?action=listResources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "&{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
