<?php
/**
 * AuthorIdentities
 *
 * PHP version 8.1
 *
 * @package  Aternos\SpigotApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpigotMC Xenforo Resource Manager API
 *
 * Exposes resource/author information via a simple JSON REST API
 *
 * The version of the OpenAPI document: 0.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\SpigotApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\SpigotApi\ObjectSerializer;

/**
 * AuthorIdentities Class Doc Comment
 *
 * @package  Aternos\SpigotApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AuthorIdentities implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Author_identities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'github' => 'string',
        'discord' => 'string',
        'youtube' => 'string',
        'aim' => 'string',
        'msn' => 'string',
        'icq' => 'string',
        'yahoo' => 'string',
        'skype' => 'string',
        'gtalk' => 'string',
        'facebook' => 'string',
        'twitter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'github' => null,
        'discord' => null,
        'youtube' => null,
        'aim' => null,
        'msn' => null,
        'icq' => null,
        'yahoo' => null,
        'skype' => null,
        'gtalk' => null,
        'facebook' => null,
        'twitter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'github' => false,
        'discord' => false,
        'youtube' => false,
        'aim' => false,
        'msn' => false,
        'icq' => false,
        'yahoo' => false,
        'skype' => false,
        'gtalk' => false,
        'facebook' => false,
        'twitter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'github' => 'github',
        'discord' => 'discord',
        'youtube' => 'youtube',
        'aim' => 'aim',
        'msn' => 'msn',
        'icq' => 'icq',
        'yahoo' => 'yahoo',
        'skype' => 'skype',
        'gtalk' => 'gtalk',
        'facebook' => 'facebook',
        'twitter' => 'twitter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'github' => 'setGithub',
        'discord' => 'setDiscord',
        'youtube' => 'setYoutube',
        'aim' => 'setAim',
        'msn' => 'setMsn',
        'icq' => 'setIcq',
        'yahoo' => 'setYahoo',
        'skype' => 'setSkype',
        'gtalk' => 'setGtalk',
        'facebook' => 'setFacebook',
        'twitter' => 'setTwitter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'github' => 'getGithub',
        'discord' => 'getDiscord',
        'youtube' => 'getYoutube',
        'aim' => 'getAim',
        'msn' => 'getMsn',
        'icq' => 'getIcq',
        'yahoo' => 'getYahoo',
        'skype' => 'getSkype',
        'gtalk' => 'getGtalk',
        'facebook' => 'getFacebook',
        'twitter' => 'getTwitter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('github', $data ?? [], null);
        $this->setIfExists('discord', $data ?? [], null);
        $this->setIfExists('youtube', $data ?? [], null);
        $this->setIfExists('aim', $data ?? [], null);
        $this->setIfExists('msn', $data ?? [], null);
        $this->setIfExists('icq', $data ?? [], null);
        $this->setIfExists('yahoo', $data ?? [], null);
        $this->setIfExists('skype', $data ?? [], null);
        $this->setIfExists('gtalk', $data ?? [], null);
        $this->setIfExists('facebook', $data ?? [], null);
        $this->setIfExists('twitter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets github
     *
     * @return string|null
     */
    public function getGithub(): ?string
    {
        return $this->container['github'];
    }

    /**
     * Sets github
     *
     * @param string|null $github github
     *
     * @return $this
     */
    public function setGithub(?string $github): static
    {
        if (is_null($github)) {
            throw new InvalidArgumentException('non-nullable github cannot be null');
        }
        $this->container['github'] = $github;

        return $this;
    }

    /**
     * Gets discord
     *
     * @return string|null
     */
    public function getDiscord(): ?string
    {
        return $this->container['discord'];
    }

    /**
     * Sets discord
     *
     * @param string|null $discord discord
     *
     * @return $this
     */
    public function setDiscord(?string $discord): static
    {
        if (is_null($discord)) {
            throw new InvalidArgumentException('non-nullable discord cannot be null');
        }
        $this->container['discord'] = $discord;

        return $this;
    }

    /**
     * Gets youtube
     *
     * @return string|null
     */
    public function getYoutube(): ?string
    {
        return $this->container['youtube'];
    }

    /**
     * Sets youtube
     *
     * @param string|null $youtube youtube
     *
     * @return $this
     */
    public function setYoutube(?string $youtube): static
    {
        if (is_null($youtube)) {
            throw new InvalidArgumentException('non-nullable youtube cannot be null');
        }
        $this->container['youtube'] = $youtube;

        return $this;
    }

    /**
     * Gets aim
     *
     * @return string|null
     */
    public function getAim(): ?string
    {
        return $this->container['aim'];
    }

    /**
     * Sets aim
     *
     * @param string|null $aim aim
     *
     * @return $this
     */
    public function setAim(?string $aim): static
    {
        if (is_null($aim)) {
            throw new InvalidArgumentException('non-nullable aim cannot be null');
        }
        $this->container['aim'] = $aim;

        return $this;
    }

    /**
     * Gets msn
     *
     * @return string|null
     */
    public function getMsn(): ?string
    {
        return $this->container['msn'];
    }

    /**
     * Sets msn
     *
     * @param string|null $msn msn
     *
     * @return $this
     */
    public function setMsn(?string $msn): static
    {
        if (is_null($msn)) {
            throw new InvalidArgumentException('non-nullable msn cannot be null');
        }
        $this->container['msn'] = $msn;

        return $this;
    }

    /**
     * Gets icq
     *
     * @return string|null
     */
    public function getIcq(): ?string
    {
        return $this->container['icq'];
    }

    /**
     * Sets icq
     *
     * @param string|null $icq icq
     *
     * @return $this
     */
    public function setIcq(?string $icq): static
    {
        if (is_null($icq)) {
            throw new InvalidArgumentException('non-nullable icq cannot be null');
        }
        $this->container['icq'] = $icq;

        return $this;
    }

    /**
     * Gets yahoo
     *
     * @return string|null
     */
    public function getYahoo(): ?string
    {
        return $this->container['yahoo'];
    }

    /**
     * Sets yahoo
     *
     * @param string|null $yahoo yahoo
     *
     * @return $this
     */
    public function setYahoo(?string $yahoo): static
    {
        if (is_null($yahoo)) {
            throw new InvalidArgumentException('non-nullable yahoo cannot be null');
        }
        $this->container['yahoo'] = $yahoo;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string|null
     */
    public function getSkype(): ?string
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string|null $skype skype
     *
     * @return $this
     */
    public function setSkype(?string $skype): static
    {
        if (is_null($skype)) {
            throw new InvalidArgumentException('non-nullable skype cannot be null');
        }
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets gtalk
     *
     * @return string|null
     */
    public function getGtalk(): ?string
    {
        return $this->container['gtalk'];
    }

    /**
     * Sets gtalk
     *
     * @param string|null $gtalk gtalk
     *
     * @return $this
     */
    public function setGtalk(?string $gtalk): static
    {
        if (is_null($gtalk)) {
            throw new InvalidArgumentException('non-nullable gtalk cannot be null');
        }
        $this->container['gtalk'] = $gtalk;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string|null
     */
    public function getFacebook(): ?string
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string|null $facebook facebook
     *
     * @return $this
     */
    public function setFacebook(?string $facebook): static
    {
        if (is_null($facebook)) {
            throw new InvalidArgumentException('non-nullable facebook cannot be null');
        }
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return string|null
     */
    public function getTwitter(): ?string
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param string|null $twitter twitter
     *
     * @return $this
     */
    public function setTwitter(?string $twitter): static
    {
        if (is_null($twitter)) {
            throw new InvalidArgumentException('non-nullable twitter cannot be null');
        }
        $this->container['twitter'] = $twitter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


