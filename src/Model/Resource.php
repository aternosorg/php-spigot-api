<?php
/**
 * Resource
 *
 * PHP version 8.1
 *
 * @package  Aternos\SpigotApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpigotMC Xenforo Resource Manager API
 *
 * Exposes resource/author information via a simple JSON REST API
 *
 * The version of the OpenAPI document: 0.2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\SpigotApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\SpigotApi\ObjectSerializer;

/**
 * Resource Class Doc Comment
 *
 * @package  Aternos\SpigotApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Resource implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Resource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'tag' => 'string',
        'current_version' => 'string',
        'category' => '\Aternos\SpigotApi\Model\ResourceCategory',
        'native_minecraft_version' => 'string',
        'supported_minecraft_versions' => 'string[]',
        'icon_link' => 'string',
        'author' => '\Aternos\SpigotApi\Model\ResourceAuthor',
        'premium' => '\Aternos\SpigotApi\Model\ResourcePremium',
        'stats' => '\Aternos\SpigotApi\Model\ResourceStats',
        'first_release' => 'int',
        'last_update' => 'int',
        'external_download_url' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'title' => null,
        'tag' => null,
        'current_version' => null,
        'category' => null,
        'native_minecraft_version' => null,
        'supported_minecraft_versions' => null,
        'icon_link' => 'uri',
        'author' => null,
        'premium' => null,
        'stats' => null,
        'first_release' => null,
        'last_update' => null,
        'external_download_url' => 'uri',
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'title' => false,
        'tag' => false,
        'current_version' => false,
        'category' => false,
        'native_minecraft_version' => true,
        'supported_minecraft_versions' => true,
        'icon_link' => false,
        'author' => false,
        'premium' => false,
        'stats' => false,
        'first_release' => false,
        'last_update' => false,
        'external_download_url' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'tag' => 'tag',
        'current_version' => 'current_version',
        'category' => 'category',
        'native_minecraft_version' => 'native_minecraft_version',
        'supported_minecraft_versions' => 'supported_minecraft_versions',
        'icon_link' => 'icon_link',
        'author' => 'author',
        'premium' => 'premium',
        'stats' => 'stats',
        'first_release' => 'first_release',
        'last_update' => 'last_update',
        'external_download_url' => 'external_download_url',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'tag' => 'setTag',
        'current_version' => 'setCurrentVersion',
        'category' => 'setCategory',
        'native_minecraft_version' => 'setNativeMinecraftVersion',
        'supported_minecraft_versions' => 'setSupportedMinecraftVersions',
        'icon_link' => 'setIconLink',
        'author' => 'setAuthor',
        'premium' => 'setPremium',
        'stats' => 'setStats',
        'first_release' => 'setFirstRelease',
        'last_update' => 'setLastUpdate',
        'external_download_url' => 'setExternalDownloadUrl',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'tag' => 'getTag',
        'current_version' => 'getCurrentVersion',
        'category' => 'getCategory',
        'native_minecraft_version' => 'getNativeMinecraftVersion',
        'supported_minecraft_versions' => 'getSupportedMinecraftVersions',
        'icon_link' => 'getIconLink',
        'author' => 'getAuthor',
        'premium' => 'getPremium',
        'stats' => 'getStats',
        'first_release' => 'getFirstRelease',
        'last_update' => 'getLastUpdate',
        'external_download_url' => 'getExternalDownloadUrl',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('current_version', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('native_minecraft_version', $data ?? [], null);
        $this->setIfExists('supported_minecraft_versions', $data ?? [], null);
        $this->setIfExists('icon_link', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('premium', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('first_release', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('external_download_url', $data ?? [], '');
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle(?string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag(): ?string
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag tag
     *
     * @return $this
     */
    public function setTag(?string $tag): static
    {
        if (is_null($tag)) {
            throw new InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets current_version
     *
     * @return string|null
     */
    public function getCurrentVersion(): ?string
    {
        return $this->container['current_version'];
    }

    /**
     * Sets current_version
     *
     * @param string|null $current_version current_version
     *
     * @return $this
     */
    public function setCurrentVersion(?string $current_version): static
    {
        if (is_null($current_version)) {
            throw new InvalidArgumentException('non-nullable current_version cannot be null');
        }
        $this->container['current_version'] = $current_version;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Aternos\SpigotApi\Model\ResourceCategory|null
     */
    public function getCategory(): ?\Aternos\SpigotApi\Model\ResourceCategory
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Aternos\SpigotApi\Model\ResourceCategory|null $category category
     *
     * @return $this
     */
    public function setCategory(?\Aternos\SpigotApi\Model\ResourceCategory $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets native_minecraft_version
     *
     * @return string|null
     */
    public function getNativeMinecraftVersion(): ?string
    {
        return $this->container['native_minecraft_version'];
    }

    /**
     * Sets native_minecraft_version
     *
     * @param string|null $native_minecraft_version native_minecraft_version
     *
     * @return $this
     */
    public function setNativeMinecraftVersion(?string $native_minecraft_version): static
    {
        if (is_null($native_minecraft_version)) {
            array_push($this->openAPINullablesSetToNull, 'native_minecraft_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('native_minecraft_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['native_minecraft_version'] = $native_minecraft_version;

        return $this;
    }

    /**
     * Gets supported_minecraft_versions
     *
     * @return string[]|null
     */
    public function getSupportedMinecraftVersions(): ?array
    {
        return $this->container['supported_minecraft_versions'];
    }

    /**
     * Sets supported_minecraft_versions
     *
     * @param string[]|null $supported_minecraft_versions supported_minecraft_versions
     *
     * @return $this
     */
    public function setSupportedMinecraftVersions(?array $supported_minecraft_versions): static
    {
        if (is_null($supported_minecraft_versions)) {
            array_push($this->openAPINullablesSetToNull, 'supported_minecraft_versions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supported_minecraft_versions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supported_minecraft_versions'] = $supported_minecraft_versions;

        return $this;
    }

    /**
     * Gets icon_link
     *
     * @return string|null
     */
    public function getIconLink(): ?string
    {
        return $this->container['icon_link'];
    }

    /**
     * Sets icon_link
     *
     * @param string|null $icon_link icon_link
     *
     * @return $this
     */
    public function setIconLink(?string $icon_link): static
    {
        if (is_null($icon_link)) {
            throw new InvalidArgumentException('non-nullable icon_link cannot be null');
        }
        $this->container['icon_link'] = $icon_link;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \Aternos\SpigotApi\Model\ResourceAuthor|null
     */
    public function getAuthor(): ?\Aternos\SpigotApi\Model\ResourceAuthor
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \Aternos\SpigotApi\Model\ResourceAuthor|null $author author
     *
     * @return $this
     */
    public function setAuthor(?\Aternos\SpigotApi\Model\ResourceAuthor $author): static
    {
        if (is_null($author)) {
            throw new InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return \Aternos\SpigotApi\Model\ResourcePremium|null
     */
    public function getPremium(): ?\Aternos\SpigotApi\Model\ResourcePremium
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param \Aternos\SpigotApi\Model\ResourcePremium|null $premium premium
     *
     * @return $this
     */
    public function setPremium(?\Aternos\SpigotApi\Model\ResourcePremium $premium): static
    {
        if (is_null($premium)) {
            throw new InvalidArgumentException('non-nullable premium cannot be null');
        }
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Aternos\SpigotApi\Model\ResourceStats|null
     */
    public function getStats(): ?\Aternos\SpigotApi\Model\ResourceStats
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Aternos\SpigotApi\Model\ResourceStats|null $stats stats
     *
     * @return $this
     */
    public function setStats(?\Aternos\SpigotApi\Model\ResourceStats $stats): static
    {
        if (is_null($stats)) {
            throw new InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets first_release
     *
     * @return int|null
     */
    public function getFirstRelease(): ?int
    {
        return $this->container['first_release'];
    }

    /**
     * Sets first_release
     *
     * @param int|null $first_release first release date as timestamp (in seconds)
     *
     * @return $this
     */
    public function setFirstRelease(?int $first_release): static
    {
        if (is_null($first_release)) {
            throw new InvalidArgumentException('non-nullable first_release cannot be null');
        }
        $this->container['first_release'] = $first_release;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return int|null
     */
    public function getLastUpdate(): ?int
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param int|null $last_update last update as timestamp (in seconds)
     *
     * @return $this
     */
    public function setLastUpdate(?int $last_update): static
    {
        if (is_null($last_update)) {
            throw new InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets external_download_url
     *
     * @return string|null
     */
    public function getExternalDownloadUrl(): ?string
    {
        return $this->container['external_download_url'];
    }

    /**
     * Sets external_download_url
     *
     * @param string|null $external_download_url external_download_url
     *
     * @return $this
     */
    public function setExternalDownloadUrl(?string $external_download_url): static
    {
        if (is_null($external_download_url)) {
            throw new InvalidArgumentException('non-nullable external_download_url cannot be null');
        }
        $this->container['external_download_url'] = $external_download_url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


